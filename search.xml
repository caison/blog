<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java诊断利器Arthas</title>
      <link href="/2019/10/13/java-zhen-duan-li-qi-arthas/"/>
      <url>/2019/10/13/java-zhen-duan-li-qi-arthas/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/arthas/1.jpg" alt></p><p><img src="Java%E8%AF%8A%E6%96%AD%E5%88%A9%E5%99%A8Arthas/1.jpg" alt="Arthas"></p><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h1><p>Arthas 是Alibaba开源的Java诊断工具，深受开发者喜爱</p><p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p><ul><li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li><li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li><li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li><li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li><li>是否有一个全局视角来查看系统的运行状况？</li><li>有什么办法可以监控到JVM的实时运行状态？</li></ul><p>Arthas支持JDK 6+，支持Linux/Mac/Winodws，采用命令行交互模式，同时提供丰富的 Tab 自动补全功能，进一步方便进行问题的定位和诊断</p><h1 id="2-主要功能"><a href="#2-主要功能" class="headerlink" title="2 主要功能"></a>2 主要功能</h1><p>Arthas提供的功能主要可以分为以下3个方面：</p><ul><li>(1) 信息监控<ul><li>进程运行基本信息：内存、CPU占用、线程信息、线程堆栈、线程数统计、环境变量信息</li><li>对象信息：类对象静态属性、 Mbean 的属性信息、已加载类信息、类加载器、类方法信息</li></ul></li><li>(2) 方法调用<ul><li>方法调用入参、返回值查看</li><li>方法被调用的调用路径、调用耗时、方法调用次数、成功次数、失败次数等统计</li><li>记录和重做方法调用</li></ul></li><li>(3) 类文件处理<ul><li>dump已加载类的字节码、字节码反编译、类编译、类重新热加载</li></ul></li></ul><h1 id="3-安装和使用"><a href="#3-安装和使用" class="headerlink" title="3 安装和使用"></a>3 安装和使用</h1><h2 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h2><p>下载arthas-boot.jar，然后用java -jar的方式启动：</p><pre><code>wget https://alibaba.github.io/arthas/arthas-boot.jarjava -jar arthas-boot.jar</code></pre><p>然后输入进程对应编号，进入Arthas的命令交互界面即可使用：</p><p><img src="https://upload-images.jianshu.io/upload_images/5618238-cd748c559b720ac4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>打印帮助信息：</p><pre><code>java -jar arthas-boot.jar -h</code></pre><h2 id="3-2-使用"><a href="#3-2-使用" class="headerlink" title="3.2 使用"></a>3.2 使用</h2><p>下面介绍Arthas的一些常用的命令和用法和原理，看看是如何解决我们实际中的问题的，命令详情可以参考Arthas的官方文档</p><h3 id="1-整体dashboard数据"><a href="#1-整体dashboard数据" class="headerlink" title="(1) 整体dashboard数据"></a>(1) 整体dashboard数据</h3><p>在arthas的命令行界面，输入dashboard命令，会实时展示当前tomcat的多线程状态、JVM各区域、GC情况等信息<br><img src="https://upload-images.jianshu.io/upload_images/5618238-a24148b54f5ac484.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="dashboard"></p><h3 id="2-查看线程监控"><a href="#2-查看线程监控" class="headerlink" title="(2) 查看线程监控"></a>(2) 查看线程监控</h3><p>输入thread命令，会显示所有线程的状态信息<br>输入thread -n 3会显示当前最忙的3个线程，可以用来排查线程CPU消耗<br>输入thread -b 会显示当前处于BLOCKED状态的线程，可以排查线程锁的问题<br><img src="https://upload-images.jianshu.io/upload_images/5618238-a84fe618574a9481.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="thread"></p><h3 id="3-JVM监控"><a href="#3-JVM监控" class="headerlink" title="(3) JVM监控"></a>(3) JVM监控</h3><p>输入jvm命令，查看jvm详细的性能数据<br><img src="https://upload-images.jianshu.io/upload_images/5618238-125dc73d973c43ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="jvm"></p><h3 id="4-观察方法参数、返回值"><a href="#4-观察方法参数、返回值" class="headerlink" title="(4) 观察方法参数、返回值"></a>(4) 观察方法参数、返回值</h3><p>有时排查问题中我们需要查看参数，返回值，通常的需要加日志打印，比较繁琐，基于watch命令我们可以很方便做到这一切</p><pre class=" language-java"><code class="language-java">$ watch demo<span class="token punctuation">.</span>MathGame primeFactors <span class="token string">"{params,returnObj}"</span> <span class="token operator">-</span>x <span class="token number">2</span>Press Ctrl<span class="token operator">+</span>C to abort<span class="token punctuation">.</span><span class="token function">Affect</span><span class="token punctuation">(</span><span class="token keyword">class</span><span class="token operator">-</span>cnt<span class="token operator">:</span><span class="token number">1</span> <span class="token punctuation">,</span> method<span class="token operator">-</span>cnt<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span> cost in <span class="token number">44</span> ms<span class="token punctuation">.</span>ts<span class="token operator">=</span><span class="token number">2018</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">51</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>cost<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">.</span>280502ms<span class="token punctuation">]</span> result<span class="token operator">=</span><span class="token annotation punctuation">@ArrayList</span><span class="token punctuation">[</span>    <span class="token annotation punctuation">@Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>        <span class="token annotation punctuation">@Integer</span><span class="token punctuation">[</span><span class="token number">535629513</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@ArrayList</span><span class="token punctuation">[</span>        <span class="token annotation punctuation">@Integer</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Integer</span><span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Integer</span><span class="token punctuation">[</span><span class="token number">191</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Integer</span><span class="token punctuation">[</span><span class="token number">49199</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h3 id="5-观察方法调用路径，耗时详情"><a href="#5-观察方法调用路径，耗时详情" class="headerlink" title="(5) 观察方法调用路径，耗时详情"></a>(5) 观察方法调用路径，耗时详情</h3><p>有时会遇到服务卡顿，想排查到底哪个步骤耗时比较久，通常做法是加日志，使用trace命令可以很方便解决这个问题：</p><pre class=" language-java"><code class="language-java">$ trace demo<span class="token punctuation">.</span>MathGame runPress Ctrl<span class="token operator">+</span>C to abort<span class="token punctuation">.</span><span class="token function">Affect</span><span class="token punctuation">(</span><span class="token keyword">class</span><span class="token operator">-</span>cnt<span class="token operator">:</span><span class="token number">1</span> <span class="token punctuation">,</span> method<span class="token operator">-</span>cnt<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span> cost in <span class="token number">42</span> ms<span class="token punctuation">.</span>`<span class="token operator">--</span><span class="token operator">-</span>ts<span class="token operator">=</span><span class="token number">2018</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">04</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">44</span><span class="token operator">:</span><span class="token number">17</span><span class="token punctuation">;</span>thread_name<span class="token operator">=</span>main<span class="token punctuation">;</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>is_daemon<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>priority<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>TCCL<span class="token operator">=</span>sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Launcher$AppClassLoader<span class="token annotation punctuation">@3d4eac69</span>    `<span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">.</span>611029ms<span class="token punctuation">]</span> demo<span class="token punctuation">.</span>MathGame<span class="token operator">:</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span>05638ms<span class="token punctuation">]</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token operator">:</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">.</span>036885ms<span class="token punctuation">]</span> demo<span class="token punctuation">.</span>MathGame<span class="token operator">:</span><span class="token function">primeFactors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        `<span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span>170316ms<span class="token punctuation">]</span> demo<span class="token punctuation">.</span>MathGame<span class="token operator">:</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="4-实现原理"><a href="#4-实现原理" class="headerlink" title="4 实现原理"></a>4 实现原理</h1><p>整体宏观模块调用图如下：<br><img src="https://upload-images.jianshu.io/upload_images/5618238-6ab6ae954f6bca2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="整体模块调用图"></p><p>篇幅原因，下面对其其中涉及的比较核心的2个原理进行简单介绍：</p><h2 id="1-信息监控、类文件处理"><a href="#1-信息监控、类文件处理" class="headerlink" title="(1) 信息监控、类文件处理"></a>(1) 信息监控、类文件处理</h2><p>JDK提供的JMX(Java Management Extensions  Java管理扩展，是一个为应用程序植入管理功能的框架)，JMX管理管理了一系列MBean对象，Arthas正是基于这些MBean对象实现内存、GC、类加载信息、JVM信息监控</p><h2 id="2-方法调用"><a href="#2-方法调用" class="headerlink" title="(2) 方法调用"></a>(2) 方法调用</h2><p>从JDK5之后，引入了java.lang.Instrument，程序员通过修改方法的字节码实现动态修改类代码。在代理类的方法中的参数中，就有Instrumentation inst实例。通过该实例，我们可以调用Instrumentation提供的各种接口。比如调用inst.getAllLoadedClasses()得到所有已经加载过的类。调用inst.addTransformer(new SdlTransformer(), true)新增转换器。调用inst.retransformClasses(Class cls)，向JVM发起重转换请求</p><p>Arthas使用ASM生成增强后的类的字节码，增强的功能包括方法调用入参、返回值查看、方法调用统计、方法调用记录和重做，再基于JDK提供的Instrumentation接口对方法进行增加和转换</p><h1 id="5-实战案例"><a href="#5-实战案例" class="headerlink" title="5 实战案例"></a>5 实战案例</h1><p>Arthas官方文档提供了许多用户案例，下面介绍几个比较有意思的案例：</p><h2 id="1-排查应用奇怪日志来源-案例详情"><a href="#1-排查应用奇怪日志来源-案例详情" class="headerlink" title="(1) 排查应用奇怪日志来源 案例详情"></a>(1) 排查应用奇怪日志来源 <a href="https://github.com/alibaba/arthas/issues/263" target="_blank" rel="noopener">案例详情</a></h2><p>服务应用运行中有时会出现一些奇怪日志，排查定位这些日志的来源比较麻烦<br>通过修改StringBuilder的实现代码打印出日志的调用堆栈信息，编译生成StringBuilder.clss，再基于Arthas提供的redefine命令修改应用中使用的StringBuilder的实际使用字节码</p><h2 id="2-排查SpringBoot应用401-404问题-案例详情"><a href="#2-排查SpringBoot应用401-404问题-案例详情" class="headerlink" title="(2) 排查SpringBoot应用401/404问题 案例详情"></a>(2) 排查SpringBoot应用401/404问题 <a href="https://github.com/alibaba/arthas/issues/429" target="_blank" rel="noopener">案例详情</a></h2><p>页面访问返回401/404，碰到这种问题时，通常很头痛，特别是在线上环境时<br>通过Arthas提供的trace命令，打印出页面访问时的完整请求树，定位出具体哪个Servlet返回404</p><pre><code>$ trace javax.servlet.Servlet *Press Ctrl+C to abort.Affect(class-cnt:7 , method-cnt:185) cost in 1018 ms.</code></pre><p>通过trace命令，trace对象是javax.servlet.Filter定位具体哪个Filter拦截请求定位返回401的问题来源</p><pre><code>$ trace javax.servlet.Filter *Press Ctrl+C to abort.Affect(class-cnt:13 , method-cnt:75) cost in 278 ms.</code></pre><h2 id="3-线上代码热更新-案例详情"><a href="#3-线上代码热更新-案例详情" class="headerlink" title="(3) 线上代码热更新 案例详情"></a>(3) 线上代码热更新 <a href="https://github.com/alibaba/arthas/issues/537" target="_blank" rel="noopener">案例详情</a></h2><p>有时为了快速验证线上问题的修复方案，或者为了快速测试，我们需要热更新代码<br>Arthas提供的解决步骤如下</p><ul><li>步骤1 jad命令反编译代码</li><li>步骤2 文本编辑器修改代码</li><li>步骤3 sc命令查找代码所在类的ClassLoader</li><li>步骤4 mc命令指定ClassLoader编译代码</li><li>步骤5 redefine命令热更新代码</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://alibaba.github.io/arthas/" target="_blank" rel="noopener">Arthas官方文档</a></p><p><a href="https://alibaba.github.io/arthas/quick-start.html" target="_blank" rel="noopener">Arthas快速入门</a></p><p><a href="https://blog.csdn.net/zl1zl2zl3/article/details/89333004" target="_blank" rel="noopener">6到飞起的Java诊断工具Arthas</a></p><p><a href="https://mp.weixin.qq.com/s/wG51oUqVPObACqvZA9ItOg" target="_blank" rel="noopener">解密阿里线上问题诊断工具Arthas和jvm-sandbox</a></p><p><img src="https://upload-images.jianshu.io/upload_images/5618238-43a7a547879c7b7e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
